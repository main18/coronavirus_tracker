{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","images/COVID19.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cn","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","modifieddata","map","dailydata","total","reportDate","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","LineChart","length","borderColor","fill","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bdd83ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__KY0gq\",\"card\":\"Cards_card__3NAEc\",\"infected\":\"Cards_infected__19eN0\",\"recovered\":\"Cards_recovered__RbxXh\",\"deaths\":\"Cards_deaths__3yF3O\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cn from 'classnames';\r\n\r\nconst Cards = ( { data : { confirmed, recovered, deaths, lastUpdate } } ) => {\r\n    //console.log(props.data);\r\n    if(!confirmed){\r\n        return 'loading...'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cn(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant='h5' gutterBottom>\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cn(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h5' gutterBottom>\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of recoveries cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cn(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h5' gutterBottom>\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=','/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of death caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const {data} = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed:data.confirmed,\r\n            recovered:data.recovered,\r\n            deaths:data.deaths,\r\n            lastUpdate:data.lastUpdate\r\n        }\r\n        return modifiedData;\r\n    }catch(e){\r\n        console.log('error');\r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifieddata = data.map((dailydata) => (\r\n            {\r\n                confirmed : dailydata.confirmed.total,\r\n                deaths : dailydata.deaths.total,\r\n                data: dailydata.reportDate,\r\n            }\r\n            ));\r\n        return modifieddata;\r\n    }catch(e){\r\n        console.log('error');\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name)\r\n    } catch (e) {\r\n        console.log('error');\r\n    }\r\n}","import React ,{useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed,  recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                  data: [confirmed.value, recovered.value, deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n\r\n    const LineChart = (\r\n        dailyData.length ? (\r\n            <Line\r\n            data={{\r\n                labels:dailyData.map(({data}) => data), //returns an array of date\r\n                datasets:\r\n                [\r\n                    {\r\n                        data : dailyData.map(({confirmed}) => confirmed), //returns an array of confirmed cases\r\n                        label : 'Infected',\r\n                        borderColor : '#3333ff',\r\n                        fill:true,\r\n                    }, \r\n                    {\r\n                        data : dailyData.map(({deaths}) => deaths), //returns an array\r\n                        label : 'Deaths',\r\n                        borderColor : 'red',\r\n                        backgroundColor : 'rgba(255, 0, 0, 0.5 )',\r\n                        fill:true,\r\n                    }\r\n                ],\r\n            }}\r\n        />\r\n        ) : null\r\n    );\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart : LineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Chart;","import React , {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [countries , setCountries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n    const fetchAPI = async () => {\r\n        setCountries( await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n    },[setCountries]);\r\n\r\n    return(\r\n        <div>\r\n            <FormControl className={styles.formControl}>\r\n                <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                    <option value=''>The World</option>\r\n                    {countries.map((country, i)=>(<option key={i} value={country}>{country}</option>))}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport { Cards, Chart, CountryPicker } from './Components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\nimport coronaImage from './images/COVID19.png';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data:{},\r\n        country:''\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        this.setState({data: fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data:fetchedData, country:country});\r\n    }\r\n\r\n    render(){\r\n        const { data, country } = this.state\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} alt='coronavirus' />\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDom.render(\r\n    <App/>, \r\n    document.getElementById('root')\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3vUiu\",\"image\":\"App_image__2TU9_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__18uvo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2Myvu\"};","module.exports = __webpack_public_path__ + \"static/media/COVID19.d7265326.png\";"],"sourceRoot":""}